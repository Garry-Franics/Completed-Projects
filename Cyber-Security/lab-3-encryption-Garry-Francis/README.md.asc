-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

[![Review Assignment Due Date](https://classroom.github.com/assets/deadline-readme-button-22041afd0340ce965d47ae6ef1cefeee28c7c493a6346c4f15d667ab976d596c.svg)](https://classroom.github.com/a/uYUqdpSS)
# Lab 3 : CEG 3400

### Encryption

#### Name: Garry Francis

- ---

### Task 1 - Symmetric Encryption

* Embed and desribe (use your words) each image
  * *CBC*: ![cbc picture](data/cbc.bmp)
  * *ECB*: ![ecb picture](data/ecb.bmp)
  * *OFB*: ![ofb picture](data/ofb.bmp)
* Are you able to infer anything about the original image?

I can tell absolutely nothing from the CBC and OFB images, they are just messes of rainbow static. The ECB image however has somewhat of a pattern to the rainbow pixels along with the circle and square still being visible is what appears to be their original locations and shape. Their colors, however, have changed.

* Why do you think this is?  Dig into the typed of each encryption algorithm and explain.

In ECB the plaintext is divided into blocks and encrypted independently. This means that identical blocks of plaintext will produce identical blocks of ciphertext, leading to patterns of the previous image still being visible (however with changed colors).

Both CBC and OFB change the plaintext before encryption based on the previous ciphertext (CBC by combining the current plaintext with the previous ciphertext; and OFB by taking the previous ciphertext and XORing it with the plaintext). Both of these methods remove the issue of predictable patterns that ECB has resulting in a completely unrecognizable image.

```bash
# There wasnt any bash for this. Was I supposed to script something?
```

- ---

### Task 2 - Asymmetric Encryption

* List all of the people that should be able to decrypt `task2.enc`

The only person that should be able to decrypt `task2.enc` is you (or anyone that somehow has your private key).

* What key should be used to encrypt this file so that the instructor can guarantee that you encrypted it?

My private key should be used to encrypt the file because nobody else should have access to it. (Which I think I did? GPG keeps telling me it was encrypted with your public key, which makes sense because thats how you would DECRYPT it. But that just means anyone with your public key could have did this.)

- ---

### Task 3 - Encrypted Email

* What is the benefit to you for having set this up? Please be verbose and discuss what additional protections having gpg encryption layered into your email account provides.

Using GPG encryption on emails can provide many protections:

- - Only the intended recipient can read your emails, as they are encrypted with their public key.

- - You can sign your emails digitally, allowing recipients to verify that the message is genuinely from you and hasn't been altered.

- - By signing your emails, you create a record that you sent the message, which can be important for formal communications.

- - You maintain control of your private keys, reducing reliance on third-party services for security.

- - Even if someone gains access to your email account, they would need your private key to decrypt messages.

- - GPG works with various email clients, making it a versatile option for enhanced security.

- ---

### Task 4 - Digital Signatures

* What key would a recipient need to verify your signature?

A recipient would need my public key to verify that is was my signature on the email.

* Why is it important that you not change the file after signing it?

It is important that I do not change the file after signing it becuase:

- - Any modifications will alter the hash value, causing a mismatch when the recipient verifies the signature, indicating tampering.

- - Signing assures the recipient that the content is authentic. Changes post-signing undermine this trust.

- - Signed documents often serve legal purposes, and altering them can lead to disputes regarding authenticity.
-----BEGIN PGP SIGNATURE-----

iQGzBAEBCgAdFiEEl3PXrZZ/7AwSav+z+EMSkeQTP9kFAme1EwIACgkQ+EMSkeQT
P9nZyQv/f8nIKfh1lEBYBn/ID7NGlK4jFaCb2mVR3hfsqzl4wxdU+nqahD14DiMv
fly2KNP8rJhW8qEA1qu3CtfM60xL07nXKoBvcFhu7bONdeMuXTTT0Y+J063b0LPb
9fkEdPbjKguicr5hwMStSmmXfEI/JcP678U1+fx/MVNsduBdH7UFu+beKeVBItFz
jJNQ+vRYlxR+KWRYkyw2pkIwKGiIGPXrTaOLq2d72ScjRhyRrbKJZhx3CFcCQf2N
AjQ5zZGi560wpqPjUj1DN3KmZpZgRN/nP8hzbZNFs50Heef55mzPI3FVbGh7CAPX
hnsihe+T/9B02d8ECZBY1Fk4NEfjIUgRVnyEsc1RvKB6GVF7BnHvLpNACta+Jxt4
5a1oCKXP5rYresway1G8qJiUSPx2kvO9bXZWQFddEs2MdE0yRTFC9MhTEntxgp8L
UXB8woZCSqYOSvN2YjU/R4o9DUaCKv5o8TX68QqX0ZOAdD4IzrpR0TPODRi8zLze
g1Uk5FeI
=cGbK
-----END PGP SIGNATURE-----
